// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations.Migrations
{
    [DbContext(typeof(RauscherDbContext))]
    [Migration("20250801205234_AutoIncrementDemaisClasses")]
    partial class AutoIncrementDemaisClasses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommodityOpenHighLowClose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Base")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("Base");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date");

                    b.Property<decimal>("PriceClose")
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("PriceClose");

                    b.Property<decimal>("PriceHigh")
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("PriceHigh");

                    b.Property<decimal>("PriceLow")
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("PriceLow");

                    b.Property<decimal>("PriceOpen")
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("PriceOpen");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Symbol");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("Timestamp");

                    b.HasKey("Id");

                    b.ToTable("CommodityOpenHighLowClose", (string)null);
                });

            modelBuilder.Entity("Domain.Models.AboutUs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.HasKey("Id");

                    b.ToTable("AboutUs", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ApiCredentials", b =>
                {
                    b.Property<string>("Apikey")
                        .HasColumnType("text")
                        .HasColumnName("ApiKey");

                    b.Property<string>("Apisecrethash")
                        .HasColumnType("text")
                        .HasColumnName("ApiSecretHash");

                    b.Property<DateTime>("Createdat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("Lastusedat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastUsedAt");

                    b.HasKey("Apikey");

                    b.ToTable("ApiCredentials", (string)null);
                });

            modelBuilder.Entity("Domain.Models.AppParameters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("CommoditiesApiKey")
                        .HasColumnType("text")
                        .HasColumnName("CommoditiesApiKey");

                    b.Property<bool>("CommoditiesApiOn")
                        .HasColumnType("boolean")
                        .HasColumnName("CommoditiesApiOn");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text")
                        .HasColumnName("ContactNumber");

                    b.Property<string>("EmailPassword")
                        .HasColumnType("text")
                        .HasColumnName("EmailPassword");

                    b.Property<string>("EmailReceiver")
                        .HasColumnType("text")
                        .HasColumnName("EmailReceiver");

                    b.Property<string>("EmailSender")
                        .HasColumnType("text")
                        .HasColumnName("EmailSender");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text")
                        .HasColumnName("InstagramUrl");

                    b.Property<string>("MarketClosingHour")
                        .HasColumnType("text")
                        .HasColumnName("MarketClosingHour");

                    b.Property<string>("MarketOpeningHour")
                        .HasColumnType("text")
                        .HasColumnName("MarketOpeningHour");

                    b.Property<int>("MinutesIntervalJob")
                        .HasColumnType("integer")
                        .HasColumnName("MinutesIntervalJob");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("integer")
                        .HasColumnName("SmtpPort");

                    b.Property<string>("SmtpServer")
                        .HasColumnType("text")
                        .HasColumnName("SmtpServer");

                    b.Property<string>("StripeApiClientKey")
                        .HasColumnType("text")
                        .HasColumnName("StripeApiClientKey");

                    b.Property<string>("StripeApiPriceId")
                        .HasColumnType("text")
                        .HasColumnName("StripeApiPriceId");

                    b.Property<string>("StripeApiSecret")
                        .HasColumnType("text")
                        .HasColumnName("StripeApiSecret");

                    b.Property<int>("StripeTrialPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("StripeTrialPeriod");

                    b.Property<string>("StripeWebhookSecret")
                        .HasColumnType("text")
                        .HasColumnName("StripeWebhookSecret");

                    b.Property<string>("WebSiteUrl")
                        .HasColumnType("text")
                        .HasColumnName("WebSiteUrl");

                    b.Property<string>("WhatsappNumber")
                        .HasColumnType("text")
                        .HasColumnName("WhatsappNumber");

                    b.Property<string>("YahooFinanceApiKey")
                        .HasColumnType("text")
                        .HasColumnName("YahooFinanceApiKey");

                    b.Property<bool>("YahooFinanceApiOn")
                        .HasColumnType("boolean")
                        .HasColumnName("YahooFinanceApiOn");

                    b.HasKey("Id");

                    b.ToTable("AppParameters", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CommoditiesRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BaseCurrency")
                        .HasColumnType("text")
                        .HasColumnName("Base");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date");

                    b.Property<bool>("Isup")
                        .HasColumnType("boolean")
                        .HasColumnName("isUp");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("Price");

                    b.Property<string>("SymbolCode")
                        .HasColumnType("text")
                        .HasColumnName("SymbolCode");

                    b.Property<long?>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("Timestamp");

                    b.Property<string>("Unit")
                        .HasColumnType("text")
                        .HasColumnName("Unit");

                    b.Property<decimal?>("Variationprice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("VariationPrice");

                    b.Property<decimal?>("Variationpricepercent")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("VariationPricePercent");

                    b.HasKey("Id");

                    b.HasIndex("SymbolCode");

                    b.ToTable("CommoditiesRate", (string)null);
                });

            modelBuilder.Entity("Domain.Models.EventRegistry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EventDate");

                    b.Property<string>("EventDescription")
                        .HasColumnType("text")
                        .HasColumnName("EventDescription");

                    b.Property<string>("EventLink")
                        .HasColumnType("text")
                        .HasColumnName("EventLink");

                    b.Property<string>("EventLocation")
                        .HasColumnType("text")
                        .HasColumnName("EventLocation");

                    b.Property<string>("EventName")
                        .HasColumnType("text")
                        .HasColumnName("EventName");

                    b.Property<string>("EventType")
                        .HasColumnType("text")
                        .HasColumnName("EventType");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean")
                        .HasColumnName("Published");

                    b.HasKey("Id");

                    b.ToTable("EventRegistry", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Folder", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("ICON")
                        .HasColumnType("text")
                        .HasColumnName("ICON");

                    b.Property<string>("SLUG")
                        .HasColumnType("text")
                        .HasColumnName("SLUG");

                    b.Property<string>("TITLE")
                        .HasColumnType("text")
                        .HasColumnName("TITLE");

                    b.HasKey("ID");

                    b.ToTable("Folder", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("AUTHOR");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("CONTENT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATEDATE");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("uuid")
                        .HasColumnName("FolderId");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("text")
                        .HasColumnName("ImgUrl");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("PUBLISHEDAT");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("TITLE");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean")
                        .HasColumnName("VISIBLE");

                    b.HasKey("Id");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Symbols", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("Appvisible")
                        .HasColumnType("boolean")
                        .HasColumnName("AppVisible");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Code");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text")
                        .HasColumnName("FriendlyName");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("SymbolType")
                        .HasColumnType("text")
                        .HasColumnName("SYMBOLTYPE");

                    b.Property<string>("Vendor")
                        .HasColumnType("text")
                        .HasColumnName("Vendor");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Symbols", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CommoditiesRate", b =>
                {
                    b.HasOne("Domain.Models.Symbols", "Symbol")
                        .WithMany("CommoditiesRates")
                        .HasForeignKey("SymbolCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("Domain.Models.Symbols", b =>
                {
                    b.Navigation("CommoditiesRates");
                });
#pragma warning restore 612, 618
        }
    }
}
